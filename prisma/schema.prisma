// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  hacker    Hacker?
  organizer Organizer?
  sponsor   Sponsor?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Hacker {
  id          Int          @id @default(autoincrement())
  fullName    String?
  age         Int?
  user        User         @relation(fields: [userId], references: [id])
  userId      Int          @unique
  team        Team?        @relation(fields: [teamId], references: [id])
  teamId      Int?
  application Application?
}

model Team {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  code    String   @unique
  members Hacker[]
}

model Organizer {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Sponsor {
  id      Int    @id @default(autoincrement())
  company String
  user    User   @relation(fields: [userId], references: [id])
  userId  Int    @unique
}

model Application {
  id         Int                         @id @default(autoincrement())
  hacker     Hacker                      @relation(fields: [hackerId], references: [id])
  hackerId   Int                         @unique
  status     ApplicationStatus           @relation(fields: [statusId], references: [id])
  statusId   Int
  formValues ApplicationFormFieldValue[]
}

model ApplicationStatus {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  applications Application[]
}

model ApplicationFormStep {
  id         Int         @id @default(autoincrement())
  title      String
  stepNumber Int
  formFields FormField[]
}

model FormField {
  id              Int                         @id @default(autoincrement())
  formFieldNumber Int
  label           String
  name            String
  required        Boolean
  step            ApplicationFormStep         @relation(fields: [stepId], references: [id])
  stepId          Int
  type            FormFieldType               @relation(fields: [typeId], references: [id])
  typeId          Int
  optionList      OptionList?                 @relation(fields: [optionListId], references: [id])
  optionListId    Int?
  formFieldValues ApplicationFormFieldValue[]
}

model FormFieldType {
  id         Int         @id @default(autoincrement())
  value      String      @unique
  formFields FormField[]
}

model File {
  id             Int                        @id @default(autoincrement())
  name           String
  path           String
  createdAt      DateTime                   @default(now())
  formFieldValue ApplicationFormFieldValue?
}

model OptionList {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  options    Option[]
  formFields FormField[]
}

model Option {
  id              Int                         @id @default(autoincrement())
  value           String
  list            OptionList                  @relation(fields: [listId], references: [id])
  listId          Int
  formFieldValues ApplicationFormFieldValue[]
}

model ApplicationFormFieldValue {
  id            Int         @id @default(autoincrement())
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId Int
  field         FormField   @relation(fields: [fieldId], references: [id])
  fieldId       Int
  value         String?
  file          File?       @relation(fields: [fileId], references: [id])
  fileId        Int?        @unique
  option        Option?     @relation(fields: [optionId], references: [id])
  optionId      Int?
}
