// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int        @id @default(autoincrement())
  githubId               Int?
  email                  String     @unique
  password               String?
  emailVerified          Boolean    @default(false)
  emailVerificationToken String?
  forgotPasswordToken    String?
  hacker                 Hacker?
  organizer              Organizer?
  sponsor                Sponsor?
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
}

model Hackathon {
  id                   Int                   @id @default(autoincrement())
  name                 String                @unique
  description          String
  eventStartDate       DateTime
  eventEndDate         DateTime
  applicationStartDate DateTime
  applicationEndDate   DateTime
  hackers              Hacker[]
  sponsors             Sponsor[]
  applicationFormSteps ApplicationFormStep[]
  voteParameters       VoteParameter[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model Hacker {
  id          Int          @id @default(autoincrement())
  user        User         @relation(fields: [userId], references: [id])
  userId      Int          @unique
  team        Team?        @relation(fields: [teamId], references: [id])
  ownedTeam   Team?        @relation(name: "TeamOwner")
  teamId      Int?
  application Application?
  hackathonId Int
  hackathon   Hackathon    @relation(fields: [hackathonId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Team {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  code    String   @unique
  ownerId Int      @unique
  owner   Hacker   @relation(name: "TeamOwner", fields: [ownerId], references: [id])
  members Hacker[]
}

model Organizer {
  id                            Int          @id @default(autoincrement())
  user                          User         @relation(fields: [userId], references: [id])
  userId                        Int          @unique
  createdAt                     DateTime     @default(now())
  updatedAt                     DateTime     @updatedAt
  votes                         Vote[]
  currentApplicationForReview   Application? @relation(fields: [currentApplicationForReviewId], references: [id])
  currentApplicationForReviewId Int?
  isAdmin                       Boolean      @default(false)
}

model Sponsor {
  id          Int       @id @default(autoincrement())
  company     String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int       @unique
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
  hackathonId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Application {
  id                  Int                         @id @default(autoincrement())
  hacker              Hacker                      @relation(fields: [hackerId], references: [id])
  hackerId            Int                         @unique
  status              ApplicationStatus           @relation(fields: [statusId], references: [id])
  statusId            Int
  formValues          ApplicationFormFieldValue[]
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  votes               Vote[]
  organizersReviewing Organizer[]
}

model ApplicationStatus {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  applications Application[]
}

model ApplicationFormStep {
  id          Int         @id @default(autoincrement())
  title       String
  position    Int
  formFields  FormField[]
  hackathon   Hackathon   @relation(fields: [hackathonId], references: [id])
  hackathonId Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model FormField {
  id              Int                         @id @default(autoincrement())
  position        Int
  label           String
  name            String
  required        Boolean
  step            ApplicationFormStep         @relation(fields: [stepId], references: [id])
  stepId          Int
  type            FormFieldType               @relation(fields: [typeId], references: [id])
  typeId          Int
  optionList      OptionList?                 @relation(fields: [optionListId], references: [id])
  optionListId    Int?
  formFieldValues ApplicationFormFieldValue[]
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
}

model FormFieldType {
  id         Int         @id @default(autoincrement())
  value      String      @unique
  formFields FormField[]
}

model File {
  id             Int                        @id @default(autoincrement())
  name           String
  path           String
  formFieldValue ApplicationFormFieldValue?
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
}

model OptionList {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  options    Option[]
  formFields FormField[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Option {
  id              Int                         @id @default(autoincrement())
  value           String
  list            OptionList                  @relation(fields: [listId], references: [id])
  listId          Int
  formFieldValues ApplicationFormFieldValue[]
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
}

model ApplicationFormFieldValue {
  id            Int         @id @default(autoincrement())
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId Int
  field         FormField   @relation(fields: [fieldId], references: [id])
  fieldId       Int
  value         String?
  file          File?       @relation(fields: [fileId], references: [id])
  fileId        Int?        @unique
  option        Option?     @relation(fields: [optionId], references: [id])
  optionId      Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([applicationId, fieldId])
}

model VoteParameter {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  weight      Int
  minValue    Int
  maxValue    Int
  hackathonId Int
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  votes       Vote[]

  @@unique([hackathonId, name])
}

model Vote {
  id              Int           @id @default(autoincrement())
  voteParameterId Int
  voteParameter   VoteParameter @relation(fields: [voteParameterId], references: [id])
  applicationId   Int
  application     Application   @relation(fields: [applicationId], references: [id])
  organizerId     Int
  organizer       Organizer     @relation(fields: [organizerId], references: [id])
  value           Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([voteParameterId, applicationId, organizerId])
}
