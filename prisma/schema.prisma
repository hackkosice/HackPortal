// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                           Int        @id @default(autoincrement())
  name                         String?
  password                     String?
  email                        String     @unique
  emailVerified                Boolean?   @default(false)
  emailVerificationToken       String?
  emailVerificationLastRequest DateTime?
  forgotPasswordToken          String?
  forgotPasswordLastRequest    DateTime?
  image                        String?
  accounts                     Account[]
  hacker                       Hacker[]
  organizer                    Organizer?
  sponsor                      Sponsor?
}

model Hackathon {
  id                             Int                   @id @default(autoincrement())
  name                           String                @unique
  title                          String?
  description                    String?
  maxTeamSize                    Int                   @default(4)
  eventStartDate                 DateTime
  eventEndDate                   DateTime
  applicationStartDate           DateTime
  applicationEndDate             DateTime
  travelReimbursementDescription String?
  hackers                        Hacker[]
  sponsors                       Sponsor[]
  applicationFormSteps           ApplicationFormStep[]
  voteParameters                 VoteParameter[]
  createdAt                      DateTime              @default(now())
  updatedAt                      DateTime              @updatedAt
  tables                         Table[]
  judgingSlots                   JudgingSlot[]
}

model Hacker {
  id                         Int                         @id @default(autoincrement())
  user                       User                        @relation(fields: [userId], references: [id])
  userId                     Int
  team                       Team?                       @relation(fields: [teamId], references: [id])
  ownedTeam                  Team?                       @relation(name: "TeamOwner")
  teamId                     Int?
  application                Application?
  hackathonId                Int
  hackathon                  Hackathon                   @relation(fields: [hackathonId], references: [id])
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  travelReimbursementRequest TravelReimbursementRequest?
  @@unique([userId, hackathonId], name: "hackerApplication")
}

model Team {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  code         String        @unique
  ownerId      Int           @unique
  owner        Hacker        @relation(name: "TeamOwner", fields: [ownerId], references: [id])
  tableId      Int?
  table        Table?        @relation(fields: [tableId], references: [id])
  challenges   Challenge[]
  members      Hacker[]
  teamJudgings TeamJudging[]
}

model Organizer {
  id                            Int           @id @default(autoincrement())
  user                          User          @relation(fields: [userId], references: [id])
  userId                        Int           @unique
  createdAt                     DateTime      @default(now())
  updatedAt                     DateTime      @updatedAt
  votes                         Vote[]
  currentApplicationForReview   Application?  @relation(fields: [currentApplicationForReviewId], references: [id])
  currentApplicationForReviewId Int?
  isAdmin                       Boolean       @default(false)
  teamJudgings                  TeamJudging[]
}

model Sponsor {
  id          Int        @id @default(autoincrement())
  company     String
  user        User       @relation(fields: [userId], references: [id])
  userId      Int        @unique
  hackathon   Hackathon  @relation(fields: [hackathonId], references: [id])
  hackathonId Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  challenge   Challenge?
}

model Challenge {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  sponsor     Sponsor  @relation(fields: [sponsorId], references: [id])
  sponsorId   Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  teams       Team[]
}

model Application {
  id                  Int                         @id @default(autoincrement())
  hacker              Hacker                      @relation(fields: [hackerId], references: [id])
  hackerId            Int                         @unique
  status              ApplicationStatus           @relation(fields: [statusId], references: [id])
  statusId            Int
  formValues          ApplicationFormFieldValue[]
  createdAt           DateTime                    @default(now())
  updatedAt           DateTime                    @updatedAt
  votes               Vote[]
  organizersReviewing Organizer[]
}

model ApplicationStatus {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  applications Application[]
}

model ApplicationFormStep {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  position    Int
  formFields  FormField[]
  hackathon   Hackathon   @relation(fields: [hackathonId], references: [id])
  hackathonId Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([hackathonId, position])
}

model FormField {
  id                             Int                         @id @default(autoincrement())
  position                       Int
  label                          String
  description                    String?
  name                           String
  required                       Boolean
  shownInList                    Boolean                     @default(false)
  shownInCheckin                 Boolean                     @default(false)
  shownInSponsorsViewTable       Boolean                     @default(false)
  shownInSponsorsViewDetails     Boolean                     @default(false)
  step                           ApplicationFormStep         @relation(fields: [stepId], references: [id])
  stepId                         Int
  type                           FormFieldType               @relation(fields: [typeId], references: [id])
  typeId                         Int
  optionList                     OptionList?                 @relation(fields: [optionListId], references: [id])
  optionListId                   Int?
  formFieldValues                ApplicationFormFieldValue[]
  createdAt                      DateTime                    @default(now())
  updatedAt                      DateTime                    @updatedAt
  formFieldVisibilityRule        FormFieldVisibilityRule?    @relation("formField")
  formFieldVisibilityRuleTargets FormFieldVisibilityRule[]   @relation("targetFormField")

  @@unique([stepId, position])
}

model FormFieldType {
  id         Int         @id @default(autoincrement())
  value      String      @unique
  formFields FormField[]
}

model FormFieldVisibilityRule {
  id                Int       @id @default(autoincrement())
  formFieldId       Int       @unique
  formField         FormField @relation("formField", fields: [formFieldId], references: [id])
  targetFormFieldId Int
  targetFormField   FormField @relation("targetFormField", fields: [targetFormFieldId], references: [id])
  targetOptionId    Int
  targetOption      Option    @relation(fields: [targetOptionId], references: [id])
}

model File {
  id                         Int                         @id @default(autoincrement())
  name                       String
  path                       String
  formFieldValue             ApplicationFormFieldValue?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime                    @updatedAt
  travelReimbursementRequest TravelReimbursementRequest?
}

model OptionList {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  options    Option[]
  formFields FormField[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Option {
  id                      Int                         @id @default(autoincrement())
  value                   String
  list                    OptionList                  @relation(fields: [listId], references: [id])
  listId                  Int
  formFieldValues         ApplicationFormFieldValue[]
  createdAt               DateTime                    @default(now())
  updatedAt               DateTime                    @updatedAt
  FormFieldVisibilityRule FormFieldVisibilityRule[]
}

model ApplicationFormFieldValue {
  id            Int         @id @default(autoincrement())
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId Int
  field         FormField   @relation(fields: [fieldId], references: [id])
  fieldId       Int
  value         String?
  file          File?       @relation(fields: [fileId], references: [id])
  fileId        Int?        @unique
  option        Option?     @relation(fields: [optionId], references: [id])
  optionId      Int?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([applicationId, fieldId])
}

model VoteParameter {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  weight      Int
  minValue    Int
  maxValue    Int
  hackathonId Int
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  votes       Vote[]

  @@unique([hackathonId, name])
}

model Vote {
  id              Int           @id @default(autoincrement())
  voteParameterId Int
  voteParameter   VoteParameter @relation(fields: [voteParameterId], references: [id])
  applicationId   Int
  application     Application   @relation(fields: [applicationId], references: [id])
  organizerId     Int
  organizer       Organizer     @relation(fields: [organizerId], references: [id])
  value           Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([voteParameterId, applicationId, organizerId])
}

model TravelReimbursementRequest {
  id                  Int                              @id @default(autoincrement())
  hackerId            Int                              @unique
  hacker              Hacker                           @relation(fields: [hackerId], references: [id])
  statusId            Int
  approvedAmount      Int?
  financialDetails    String?
  status              TravelReimbursementRequestStatus @relation(fields: [statusId], references: [id])
  proofOfTravelFileId Int?                             @unique
  proofOfTravelFile   File?                            @relation(fields: [proofOfTravelFileId], references: [id])
  countryOfTravel     String
  createdAt           DateTime                         @default(now())
  updatedAt           DateTime                         @updatedAt
}

model TravelReimbursementRequestStatus {
  id        Int                          @id @default(autoincrement())
  name      String                       @unique
  requests  TravelReimbursementRequest[]
  createdAt DateTime                     @default(now())
  updatedAt DateTime                     @updatedAt
}

model Table {
  id          Int       @id @default(autoincrement())
  code        String
  hackathonId Int
  hackathon   Hackathon @relation(fields: [hackathonId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  teams       Team[]
}

model JudgingSlot {
  id           Int           @id @default(autoincrement())
  startTime    DateTime
  endTime      DateTime
  hackathonId  Int
  hackathon    Hackathon     @relation(fields: [hackathonId], references: [id])
  teamJudgings TeamJudging[]
}

model TeamJudging {
  id             Int         @id @default(autoincrement())
  judgingVerdict String?
  organizerId    Int
  organizer      Organizer   @relation(fields: [organizerId], references: [id])
  teamId         Int
  team           Team        @relation(fields: [teamId], references: [id])
  judgingSlotId  Int
  judgingSlot    JudgingSlot @relation(fields: [judgingSlotId], references: [id])
}
